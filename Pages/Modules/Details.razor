@page "/modules/{Id:int}"
@using LMS.Core.Entities
@using LMS.Core.Interfaces
@using LMS.Web.Models
@inject IModuleRepository ModuleRepository
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject LessonService LessonService
@inject ILogger<Details> Logger
@implements IDisposable

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    @if (module == null)
    {
        <LoadingSpinner />
    }
    else
    {
        <div class="bg-white rounded-lg shadow">
            <!-- Header -->
            <div class="px-6 py-5 border-b border-gray-200">
                <div class="flex items-center justify-between">
                    <div>
                        <h1 class="text-2xl font-bold text-gray-900">@module.Title</h1>
                        <p class="mt-1 text-sm text-gray-500">@module.Description</p>
                    </div>
                    <button @onclick="NavigateBack" 
                            class="inline-flex items-center px-4 py-2 text-sm text-gray-700 hover:text-gray-900">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                        </svg>
                        Back to course
                    </button>
                </div>
            </div>

            <!-- Content -->
            <div class="px-6 py-5">
                <div class="flex items-center justify-between mb-6">
                    <h2 class="text-lg font-medium text-gray-900">Lessons</h2>
                    <button @onclick="ShowAddLesson"
                            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        Add Lesson
                    </button>
                </div>

                @if (!module.Lessons.Any())
                {
                    <div class="text-center py-12">
                        <p class="text-sm text-gray-500">
                            Click 'Add Lesson' to create your first lesson.
                        </p>
                    </div>
                }
                else
                {
                    <div class="space-y-4">
                        @foreach (var lesson in module.Lessons.OrderBy(l => l.Order))
                        {
                            <div class="border rounded-lg p-4 hover:bg-gray-50">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <h3 class="text-lg font-medium text-gray-900">@lesson.Title</h3>
                                        <p class="mt-1 text-sm text-gray-500">
                                            @(lesson.Content.Length > 100 ? $"{lesson.Content[..100]}..." : lesson.Content)
                                        </p>
                                    </div>
                                    <div class="flex items-center space-x-4">
                                        <button @onclick="() => ShowEditLesson(lesson)"
                                                class="text-gray-400 hover:text-blue-600">
                                            <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                            </svg>
                                        </button>
                                        <button @onclick="() => DeleteLesson(lesson)"
                                                class="text-gray-400 hover:text-red-600">
                                            <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>

<Modal Show="showLessonModal" 
       Title="@(editingLesson == null ? "Add Lesson" : "Edit Lesson")" 
       OnClose="CloseLessonModal">
    <LessonForm 
        LessonModel="@currentLesson"
        OnValidSubmit="@HandleLessonSubmit"
        OnCancel="@CloseLessonModal" />
</Modal>

@code {
    [Parameter]
    public int Id { get; set; }

    private Module? module;
    private bool showLessonModal;
    private LessonModel currentLesson = new();
    private Lesson? editingLesson;

    protected override async Task OnInitializedAsync()
    {
        await LoadModule();
    }

    private async Task LoadModule()
    {
        try
        {
            module = await ModuleRepository.GetModuleWithLessonsAsync(Id);
            if (module == null)
            {
                NotificationService.ShowError("Module not found");
                NavigationManager.NavigateTo("/courses");
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error loading module: {ex.Message}");
            NavigationManager.NavigateTo("/courses");
        }
    }

    private void ShowAddLesson()
    {
        currentLesson = new LessonModel 
        { 
            ModuleId = Id,
            Order = module?.Lessons.Count ?? 0 + 1
        };
        editingLesson = null;
        showLessonModal = true;
        StateHasChanged(); // Ensure UI updates
    }

    private void ShowEditLesson(Lesson lesson)
    {
        editingLesson = lesson;
        currentLesson = new LessonModel
        {
            Id = lesson.Id,
            Title = lesson.Title,
            Content = lesson.Content,
            Order = lesson.Order,
            ModuleId = Id,
            Attachments = lesson.Attachments.Select(a => new AttachmentModel
            {
                Id = a.Id,
                Title = a.Title,
                FileUrl = a.FileUrl,
                FileType = a.FileType,
                FileSize = a.FileSize
            }).ToList()
        };
        showLessonModal = true;
    }

    private async Task HandleLessonSubmit(LessonModel model)
    {
        try
        {
            Logger.LogInformation("Handling lesson submit..."); // Debug log
            bool success;

            if (editingLesson == null)
            {
                Logger.LogInformation("Creating new lesson..."); // Debug log
                success = await LessonService.CreateLessonAsync(model);
            }
            else
            {
                Logger.LogInformation("Updating existing lesson..."); // Debug log
                success = await LessonService.UpdateLessonAsync(model);
            }

            if (success)
            {
                Logger.LogInformation("Lesson saved successfully"); // Debug log
                await LoadModule();
                CloseLessonModal();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving lesson"); // Debug log
            NotificationService.ShowError($"Error saving lesson: {ex.Message}");
        }
    }

    private async Task DeleteLesson(Lesson lesson)
    {
        try
        {
            if (await LessonService.DeleteLessonAsync(lesson.Id, Id))
            {
                await LoadModule();
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error deleting lesson: {ex.Message}");
        }
    }

    private void CloseLessonModal()
    {
        showLessonModal = false;
        currentLesson = new LessonModel();
        editingLesson = null;
        StateHasChanged(); // Ensure UI updates
    }

    private void NavigateBack()
    {
        if (module?.Course != null)
        {
            NavigationManager.NavigateTo($"/courses/{module.Course.Id}");
        }
        else
        {
            NavigationManager.NavigateTo("/courses");
        }
    }

    public void Dispose()
    {
        // Cleanup code if needed
    }
} 
} 