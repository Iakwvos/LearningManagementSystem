@page "/courses/{Id:int}"
@using LMS.Core.Entities
@using LMS.Core.Interfaces
@using LMS.Web.Models
@inject ICourseRepository CourseRepository
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject IJSRuntime JSRuntime

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    @if (course == null)
    {
        <LoadingSpinner />
    }
    else
    {
        <div class="bg-white shadow rounded-lg">
            <!-- Course Header -->
            <div class="px-6 py-5 border-b border-gray-200">
                <div class="flex justify-between items-center">
                    <div>
                        <h1 class="text-2xl font-bold text-gray-900">@course.Title</h1>
                        <p class="mt-1 text-sm text-gray-500">@course.Description</p>
                    </div>
                    <div class="flex space-x-4">
                        <button @onclick="ShowAddModule"
                                class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                            Add Module
                        </button>
                        <button @onclick="NavigateBack"
                                class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                            Back to Courses
                        </button>
                    </div>
                </div>
            </div>

            <!-- Modules List -->
            <div class="px-6 py-5">
                @if (!course.Modules.Any())
                {
                    <div class="text-center py-12">
                        <p class="text-sm text-gray-500">No modules yet. Click 'Add Module' to create your first module.</p>
                    </div>
                }
                else
                {
                    <div class="space-y-4">
                        @foreach (var module in course.Modules.OrderBy(m => m.Order))
                        {
                            <div class="bg-white shadow rounded-lg p-6 hover:shadow-md transition-shadow">
                                <div class="flex justify-between items-start">
                                    <div>
                                        <h3 class="text-lg font-medium text-gray-900">@module.Title</h3>
                                        <p class="mt-1 text-sm text-gray-500">@module.Description</p>
                                        <div class="mt-2 flex items-center text-sm text-gray-500">
                                            <svg class="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                                            </svg>
                                            @module.Lessons.Count lesson@(module.Lessons.Count != 1 ? "s" : "")
                                        </div>
                                    </div>
                                    <div class="flex space-x-2">
                                        <button @onclick="() => NavigateToModule(module)"
                                                class="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
                                            View
                                        </button>
                                        <button @onclick="() => ShowEditModule(module)"
                                                class="text-gray-400 hover:text-blue-600">
                                            <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                            </svg>
                                        </button>
                                        <button @onclick="() => DeleteModule(module)"
                                                class="text-gray-400 hover:text-red-600">
                                            <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>

<Modal Show="showModuleModal" 
       Title="@(editingModule == null ? "Add Module" : "Edit Module")" 
       OnClose="CloseModuleModal">
    <ModuleForm 
        ModuleModel="@currentModule"
        OnValidSubmit="@HandleModuleSubmit"
        OnCancel="@CloseModuleModal" />
</Modal>

@code {
    [Parameter]
    public int Id { get; set; }

    private Course? course;
    private bool showModuleModal;
    private ModuleModel currentModule = new();
    private Module? editingModule;

    protected override async Task OnInitializedAsync()
    {
        await LoadCourse();
    }

    private async Task LoadCourse()
    {
        try
        {
            course = await CourseRepository.GetCourseWithModulesAsync(Id);
            if (course == null)
            {
                NotificationService.ShowError("Course not found");
                NavigationManager.NavigateTo("/courses");
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error loading course: {ex.Message}");
            NavigationManager.NavigateTo("/courses");
        }
    }

    private void ShowAddModule()
    {
        currentModule = new ModuleModel 
        { 
            CourseId = Id,
            Order = course?.Modules.Count ?? 0 + 1
        };
        editingModule = null;
        showModuleModal = true;
        StateHasChanged();
    }

    private void ShowEditModule(Module module)
    {
        editingModule = module;
        currentModule = new ModuleModel
        {
            Id = module.Id,
            Title = module.Title,
            Description = module.Description,
            Order = module.Order,
            CourseId = module.CourseId
        };
        showModuleModal = true;
        StateHasChanged();
    }

    private async Task DeleteModule(Module module)
    {
        try
        {
            if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this module?"))
            {
                return;
            }

            course?.Modules.Remove(module);
            await CourseRepository.UpdateAsync(course!);
            NotificationService.ShowSuccess("Module deleted successfully");
            await LoadCourse();
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error deleting module: {ex.Message}");
        }
    }

    private async Task HandleModuleSubmit(ModuleModel model)
    {
        try
        {
            if (editingModule == null)
            {
                // Create new module
                var newModule = new Module
                {
                    Title = model.Title,
                    Description = model.Description,
                    Order = model.Order,
                    CourseId = model.CourseId
                };
                course?.Modules.Add(newModule);
            }
            else
            {
                // Update existing module
                editingModule.Title = model.Title;
                editingModule.Description = model.Description;
                editingModule.Order = model.Order;
            }

            await CourseRepository.UpdateAsync(course!);
            NotificationService.ShowSuccess($"Module {(editingModule == null ? "created" : "updated")} successfully");
            await LoadCourse();
            CloseModuleModal();
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error saving module: {ex.Message}");
        }
    }

    private void CloseModuleModal()
    {
        showModuleModal = false;
        currentModule = new ModuleModel();
        editingModule = null;
        StateHasChanged();
    }

    private void NavigateToModule(Module module)
    {
        NavigationManager.NavigateTo($"/modules/{module.Id}");
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/courses");
    }
} 