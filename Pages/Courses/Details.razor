@page "/courses/{Id:int}"
@inject NavigationManager NavigationManager
@inject CourseService CourseService
@inject NotificationService NotificationService

<div class="min-h-screen bg-gray-100 p-8">
    @if (course == null)
    {
        <LoadingSpinner />
    }
    else
    {
        <div class="max-w-7xl mx-auto">
            <div class="bg-white rounded-lg shadow-md">
                <div class="relative">
                    @if (!string.IsNullOrEmpty(course.ImageUrl))
                    {
                        <img src="@course.ImageUrl" alt="@course.Title" class="w-full h-64 object-cover rounded-t-lg"/>
                    }
                    <div class="absolute top-4 left-4">
                        <button @onclick="NavigateBack" 
                                class="bg-white/80 hover:bg-white p-2 rounded-full">
                            <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                            </svg>
                        </button>
                    </div>
                </div>

                <div class="p-6">
                    <div class="flex justify-between items-start mb-6">
                        <div>
                            <h1 class="text-3xl font-bold text-gray-900 mb-2">@course.Title</h1>
                            <p class="text-gray-600">@course.Description</p>
                        </div>
                        <button @onclick="@(() => NavigationManager.NavigateTo($"/courses/edit/{Id}"))"
                                class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700">
                            Edit Course
                        </button>
                    </div>

                    <div class="border-t border-gray-200 pt-6">
                        <div class="flex justify-between items-center mb-4">
                            <h2 class="text-xl font-semibold text-gray-900">Course Modules</h2>
                            <button @onclick="() => showAddModule = true"
                                    class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700">
                                Add Module
                            </button>
                        </div>

                        @if (showAddModule)
                        {
                            <div class="mb-6 bg-gray-50 p-4 rounded-lg">
                                <h3 class="text-lg font-medium text-gray-900 mb-4">Add New Module</h3>
                                <ModuleForm ModuleModel="@newModule"
                                          OnValidSubmit="@HandleAddModule"
                                          OnCancel="@(() => showAddModule = false)" />
                            </div>
                        }
                        
                        @if (!course.Modules.Any())
                        {
                            <p class="text-gray-500 italic">No modules available for this course.</p>
                        }
                        else
                        {
                            <div class="space-y-4">
                                @foreach (var module in course.Modules.OrderBy(m => m.Order))
                                {
                                    <div class="border border-gray-200 rounded-lg p-4 hover:bg-gray-50">
                                        <div class="flex justify-between items-start">
                                            <div>
                                                <h3 class="text-lg font-medium text-gray-900">@module.Title</h3>
                                                <p class="text-gray-600 mt-1">@module.Description</p>
                                            </div>
                                            <div class="flex space-x-2">
                                                <button @onclick="() => ShowEditModule(module)"
                                                        class="text-blue-600 hover:text-blue-700">
                                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                                              d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                                    </svg>
                                                </button>
                                                <button @onclick="() => DeleteModule(module)"
                                                        class="text-red-600 hover:text-red-700">
                                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                                              d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                                    </svg>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<Modal Show="showEditModule" Title="Edit Module" OnClose="@(() => CancelEdit())">
    @if (editingModule != null)
    {
        <ModuleForm 
            ModuleModel="@editingModule"
            OnValidSubmit="@HandleEditModule"
            OnCancel="@(() => CancelEdit())" />
    }
</Modal>

@code {
    [Parameter]
    public int Id { get; set; }

    private Course? course;
    private bool showAddModule;
    private bool showEditModule;
    private ModuleModel newModule = new();
    private ModuleModel? editingModule;

    protected override async Task OnInitializedAsync()
    {
        await LoadCourse();
        newModule.CourseId = Id;
        newModule.Order = course?.Modules.Count + 1 ?? 1;
    }

    private async Task LoadCourse()
    {
        course = await CourseService.GetCourseAsync(Id);
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/courses");
    }

    private async Task HandleAddModule(ModuleModel model)
    {
        try
        {
            await CourseService.AddModuleAsync(Id, model);
            await LoadCourse();
            showAddModule = false;
            newModule = new ModuleModel { CourseId = Id, Order = course?.Modules.Count + 1 ?? 1 };
            NotificationService.ShowSuccess("Module added successfully");
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to add module: {ex.Message}");
        }
    }

    private void ShowEditModule(Module module)
    {
        editingModule = new ModuleModel
        {
            Id = module.Id,
            Title = module.Title,
            Description = module.Description,
            Order = module.Order,
            CourseId = Id
        };
        showEditModule = true;
        StateHasChanged();
    }

    private void CancelEdit()
    {
        showEditModule = false;
        editingModule = null;
        StateHasChanged();
    }

    private async Task HandleEditModule(ModuleModel model)
    {
        try
        {
            if (model == null) return;
            
            await CourseService.UpdateModuleAsync(model);
            await LoadCourse();
            showEditModule = false;
            editingModule = null;
            NotificationService.ShowSuccess("Module updated successfully");
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to update module: {ex.Message}");
        }
    }

    private async Task DeleteModule(Module module)
    {
        try
        {
            await CourseService.DeleteModuleAsync(Id, module.Id);
            await LoadCourse();
            NotificationService.ShowSuccess("Module deleted successfully");
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to delete module: {ex.Message}");
        }
    }
} 
} 