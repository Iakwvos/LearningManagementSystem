<div class="fixed bottom-4 right-4 z-50 space-y-4">
    @foreach (var notification in _notifications)
    {
        <div @key="notification.Id" class="@GetToastClass(notification.Type) rounded-lg p-4 shadow-lg transition-all duration-500 transform @(_closingNotifications.Contains(notification.Id) ? "translate-x-full opacity-0" : "translate-x-0 opacity-100")">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    @switch (notification.Type)
                    {
                        case NotificationType.Success:
                            <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                            </svg>
                            break;
                        case NotificationType.Error:
                            <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                            </svg>
                            break;
                        case NotificationType.Warning:
                            <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                            </svg>
                            break;
                        default:
                            <svg class="h-5 w-5 text-blue-400" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                            </svg>
                            break;
                    }
                </div>
                <div class="ml-3">
                    <p class="text-sm font-medium text-gray-900">
                        @notification.Message
                    </p>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Notification> _notifications = new();
    private HashSet<string> _closingNotifications = new();
    [Inject] private NotificationService NotificationService { get; set; } = default!;

    protected override void OnInitialized()
    {
        NotificationService.OnNotification += HandleNotification;
    }

    private string GetToastClass(NotificationType type) => type switch
    {
        NotificationType.Success => "bg-green-50",
        NotificationType.Error => "bg-red-50",
        NotificationType.Warning => "bg-yellow-50",
        _ => "bg-blue-50"
    };

    private async void HandleNotification(Notification notification)
    {
        await InvokeAsync(() =>
        {
            _notifications.Add(notification);
            StateHasChanged();
        });

        await Task.Delay(5000); // Show notification for 5 seconds

        await InvokeAsync(() =>
        {
            _closingNotifications.Add(notification.Id);
            StateHasChanged();
        });

        await Task.Delay(500); // Wait for fade out animation

        await InvokeAsync(() =>
        {
            _notifications.Remove(notification);
            _closingNotifications.Remove(notification.Id);
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        NotificationService.OnNotification -= HandleNotification;
    }
} 